{"version":3,"sources":["context/ModeContext.jsx","context/CountriesContext.tsx","components/ModeSwitch.jsx","context/SearchContext.tsx","components/SearchInput.tsx","components/Filter.tsx","components/CountryCard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ModeContext","React","createContext","ModeProvider","props","useState","darkMode","setDarkMode","Provider","value","children","initialValue","countries","name","topLevelDomain","alpha2Code","alpha3Code","callingCodes","capital","altSpellings","region","subregion","population","latlng","demonym","area","gini","timezones","borders","nativeName","numericCode","currencies","code","symbol","languages","iso639_1","iso639_2","translations","de","es","fr","ja","it","br","pt","nl","hr","fa","flag","regionalBlocs","acronym","otherAcronyms","otherNames","cioc","setCountries","CountriesContext","CountriesProvider","ModeSwitch","useContext","className","onClick","SearchContext","undefined","SearchProvider","searchTerm","setSearchTerm","SearchInput","placeholder","id","styleClass","context","Error","useSearchContext","debounceTerm","setDebounceTerm","useEffect","timerId","setTimeout","clearTimeout","a","axios","get","data","console","log","getCountries","type","onChange","e","target","Filter","showFilters","setShowFilters","setRegion","length","innerHTML","stopPropagation","handleRegionClick","CountryCard","country","pop","toFixed","replace","slice","src","alt","App","map","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab89da28.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport const ModeContext = React.createContext();\r\n\r\nexport const ModeProvider = (props) => {\r\n    const [darkMode, setDarkMode] = useState(false);\r\n    \r\n  return (\r\n    <ModeContext.Provider\r\n      value={{\r\n          'darkMode':darkMode,\r\n          'setDarkMode':setDarkMode\r\n      }}\r\n    >\r\n      {props.children}\r\n    </ModeContext.Provider>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\ntype Country = {\r\n  name: string;\r\n  topLevelDomain: Array<string>;\r\n  alpha2Code: string;\r\n  alpha3Code: string;\r\n  callingCodes: Array<string>;\r\n  capital: string;\r\n  altSpellings: Array<string>;\r\n  region: string;\r\n  subregion: string;\r\n  population: number;\r\n  latlng: Array<number>;\r\n  demonym: string;\r\n  area: number;\r\n  gini: number;\r\n  timezones: Array<string>;\r\n  borders: Array<string>;\r\n  nativeName: string;\r\n  numericCode: string;\r\n  currencies: Array<{\r\n    code: string;\r\n    name: string;\r\n    symbol: string;\r\n  }>;\r\n  languages: Array<{\r\n    iso639_1: string;\r\n    iso639_2: string;\r\n    name: string;\r\n    nativeName: string;\r\n  }>;\r\n  translations: {\r\n    de: string;\r\n    es: string;\r\n    fr: string;\r\n    ja: string;\r\n    it: string;\r\n    br: string;\r\n    pt: string;\r\n    nl: string;\r\n    hr: string;\r\n    fa: string;\r\n  };\r\n  flag: string;\r\n  regionalBlocs: Array<{\r\n    acronym: string;\r\n    name: string;\r\n    otherAcronyms:  Array<string>;\r\n    otherNames: Array<string>;\r\n  }>;\r\n  cioc: string;\r\n};\r\nconst initialValue = {\r\n    countries:[\r\n    {\r\n        name: '',\r\n        topLevelDomain: [''],\r\n        alpha2Code: '',\r\n        alpha3Code: '',\r\n        callingCodes: [''],\r\n        capital: '',\r\n        altSpellings: [''],\r\n        region: '',\r\n        subregion: '',\r\n        population: 0,\r\n        latlng: [0,0],\r\n        demonym: '',\r\n        area: 0,\r\n        gini: 0,\r\n        timezones: [''],\r\n        borders: [''],\r\n        nativeName: '',\r\n        numericCode: '',\r\n        currencies: [{\r\n          code: '',\r\n          name: '',\r\n          symbol: '',\r\n        }],\r\n        languages: [{\r\n          iso639_1: '',\r\n          iso639_2: '',\r\n          name: '',\r\n          nativeName: '',\r\n        }],\r\n        translations: {\r\n          de: '',\r\n          es: '',\r\n          fr: '',\r\n          ja: '',\r\n          it: '',\r\n          br: '',\r\n          pt: '',\r\n          nl: '',\r\n          hr: '',\r\n          fa: '',\r\n        },\r\n        flag: '',\r\n        regionalBlocs: [{\r\n          acronym: '',\r\n          name: '',\r\n          otherAcronyms: [''],\r\n          otherNames: [''],\r\n        }],\r\n        cioc: '',\r\n      }\r\n],\r\nsetCountries:()=>{}\r\n}\r\ninterface CountriesContextInt {\r\n  countries: Country[];\r\n  setCountries: React.Dispatch<React.SetStateAction<Country[]>>;\r\n}\r\n\r\nexport const CountriesContext = React.createContext<\r\n  CountriesContextInt\r\n>(initialValue);\r\n\r\n\r\n\r\nexport const CountriesProvider: React.FC = (props) => {\r\n  const [countries, setCountries] = useState(initialValue.countries);\r\n\r\n  return (\r\n    <CountriesContext.Provider\r\n      value={{\r\n        countries: countries,\r\n        setCountries: setCountries,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </CountriesContext.Provider>\r\n  );\r\n};\r\n","import { useContext } from \"react\";\r\nimport { ModeContext } from \"../context/ModeContext\";\r\n\r\nconst ModeSwitch = () => {\r\n  const { darkMode, setDarkMode } = useContext(ModeContext);\r\n  \r\n  return (\r\n    <div className=\"\" onClick={()=>setDarkMode(!darkMode)}>\r\n      <i className={`bi bi-moon${darkMode ? \"\" : \"-fill\"}`}></i>\r\n      {`${darkMode ? \"Light\" : \"Dark\"} Mode`}\r\n    </div>\r\n  );\r\n};\r\nexport default ModeSwitch;\r\n","import React, { useContext, useState } from \"react\";\r\ninterface searchContext{\r\nsearchTerm:string;\r\nsetSearchTerm:React.Dispatch<React.SetStateAction<string>>;\r\n}\r\n\r\nexport const SearchContext = React.createContext<searchContext | undefined>(undefined);\r\n\r\nexport const useSearchContext=() =>{\r\n  const context = useContext(SearchContext)\r\n  if (context === undefined) {\r\n    throw new Error(\"useSearchContext must be within SearchProvider\")\r\n  }\r\n\r\n  return context\r\n}\r\n\r\nexport const SearchProvider:React.FC = (props) => {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    \r\n  return (\r\n    <SearchContext.Provider\r\n      value={{\r\n          'searchTerm':searchTerm,\r\n          'setSearchTerm':setSearchTerm,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </SearchContext.Provider>\r\n  );\r\n};","import { useContext, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useSearchContext } from \"../context/SearchContext\";\r\nimport {CountriesContext} from '../context/CountriesContext';\r\n\r\ninterface SearchInputProps {\r\n  styleClass?: string;\r\n  id: string;\r\n  placeholder?: string;\r\n}\r\nconst SearchInput: React.FC<SearchInputProps> = ({\r\n  placeholder,\r\n  id,\r\n  styleClass,\r\n}) => {\r\n  const { searchTerm, setSearchTerm } = useSearchContext();\r\n  const [debounceTerm, setDebounceTerm] = useState(searchTerm);\r\n  const { setCountries} = useContext(CountriesContext)\r\n\r\n  useEffect(() => {\r\n    const timerId = setTimeout(() => {\r\n      setDebounceTerm(searchTerm);\r\n    }, 1000);\r\n    return () => clearTimeout(timerId);\r\n  }, [searchTerm]);\r\n\r\n  useEffect(() => {\r\n    const getCountries = async () => {\r\n      try {\r\n        const { data } = await axios.get(\r\n          `https://restcountries.eu/rest/v2${\r\n            debounceTerm ? \"/name/\" + debounceTerm : \"/all\"\r\n          }`\r\n        );\r\n\r\n        // console.log('DATA = ', data);\r\n        setCountries(data);\r\n        // console.log('countries ', countries);\r\n        \r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n\r\n    getCountries();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [debounceTerm]);\r\n\r\n  return (\r\n    <div className=\"input-group flex-nowrap shadow search-input-group\">\r\n      <span className=\"input-group-text\" id=\"addon-wrapping\">\r\n        <i className=\"bi bi-search\"></i>\r\n      </span>\r\n      <input\r\n        type=\"text\"\r\n        className={`form-control search-input ${styleClass}`}\r\n        id={id}\r\n        placeholder={placeholder}\r\n        aria-label={placeholder ? placeholder : \"search input\"}\r\n        aria-describedby=\"addon-wrapping\"\r\n        value={searchTerm}\r\n        onChange={(e) => setSearchTerm(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default SearchInput;\r\n","import { useContext, useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\n\r\nimport {CountriesContext} from '../context/CountriesContext';\r\nimport \"./Filter.scss\";\r\nconst Filter = () => {\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  const [region, setRegion] = useState('');\r\n  const { setCountries} = useContext(CountriesContext);\r\n  useEffect(() => {\r\n    const getCountries = async () => {\r\n      try {\r\n        const { data } = await axios.get(\r\n          `https://restcountries.eu/rest/v2/region/${\r\n            region\r\n          }`\r\n        );\r\n\r\n        // console.log('DATA = ', data);\r\n        setCountries(data);\r\n        // console.log('countries ', countries);\r\n        \r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    if (region.length){\r\n        getCountries();\r\n    }\r\n    \r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [region]);\r\n \r\n  const handleRegionClick = (e: any) => {\r\n      \r\n    console.log(\"CLICK TARGET\", e.target.innerHTML);\r\n    setShowFilters(!showFilters);\r\n    setRegion(e.target.innerHTML);\r\n    e.stopPropagation();\r\n  };\r\n  return (\r\n    <div className=\"filter mb-3 \">\r\n      <div\r\n        className=\"btn  filter-btn shadow ms-auto d-flex justify-content-between\"\r\n        onClick={()=>setShowFilters(!showFilters)}\r\n\r\n        data-bs-toggle=\"dropdown\"\r\n        aria-expanded=\"false\"\r\n      >\r\n        <span>Filter by Region</span><i className={`bi bi-chevron-${showFilters?'up':'down'}`}></i> \r\n      </div>\r\n      <div\r\n        className={`dropdown-menu ${showFilters ? \"show\" : \"\"}`}\r\n        onClick={(e) => handleRegionClick(e)}\r\n      >\r\n        <div className=\"dropdown-item\">Africa</div>\r\n        <div className=\"dropdown-item\">America</div>\r\n        <div className=\"dropdown-item\">Asia</div>\r\n        <div className=\"dropdown-item\">Europe</div>\r\n        <div className=\"dropdown-item\">Oceania</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Filter;\r\n","import './CountryCard.scss';\r\n\r\nconst CountryCard = ({ country }: any) => {\r\n    \r\n\r\n    // console.log(country.name);\r\n    const { name, population, region, capital } = country;\r\n    const pop = `${population\r\n      .toFixed(1)\r\n      .replace(/(\\d)(?=(\\d{3})+\\.)/g, \"$1,\")\r\n      .slice(0, -2)}`;\r\n    return (\r\n      <div className=\"card h-100\">\r\n        <div className=\"country-img\">\r\n          <img src={country.flag} className=\"card-img-top\" alt=\"...\" />\r\n        </div>\r\n  \r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">{name}</h5>\r\n  \r\n          <ul className=\"list-group list-group-flush\">\r\n            <li className=\"list-group-item \">\r\n              <span className=\"country-subtitle\">Population:</span>\r\n              {pop}\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n              <span className=\"country-subtitle\">Region:</span>\r\n              {region}\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n              <span className=\"country-subtitle\">Capital:</span>\r\n              {capital}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  export default CountryCard;","import { useContext } from \"react\";\nimport { ModeContext } from \"./context/ModeContext\";\nimport {CountriesContext} from './context/CountriesContext';\n\n\nimport ModeSwitch from \"./components/ModeSwitch\";\nimport SearchInput from './components/SearchInput';\nimport Filter from './components/Filter';\nimport CountryCard from './components/CountryCard';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./App.scss\";\n\n// import { countries } from \"./data/data\";\n\nconst App = () =>{\n  const { darkMode } = useContext(ModeContext);\n  const {countries} =useContext(CountriesContext);\n  return (\n    <div className=\"App\">\n      <div className={`${darkMode ? \"dark\" : \"light\"}-mode`}>\n        <header>\n          <nav className=\" container-fluid shadow \">\n            <div className=\"container d-flex justify-content-between align-items-center\">\n              <h1 className=\"\">Where in the world?</h1>\n              <ModeSwitch />\n            </div>\n          </nav>\n        </header>\n        <main className=\"container \">\n        <div className=\"row \">\n          <div className='col-sm-6 mb-4'>\n            <SearchInput id={'search-input'} placeholder={'Search for a country...'}/>\n          </div>\n          <div className='col-sm-6 mb-4 ms-auto'>\n            <Filter/>\n          </div>\n          </div>\n          < div className=\"row\">\n          \n            {countries.map((country, i) => (\n              <div key={i} className=\"col-md-3 mb-4\">\n                <CountryCard country={country} />\n              </div>\n            ))}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { ModeProvider } from \"./context/ModeContext\";\nimport { SearchProvider } from \"./context/SearchContext\";\nimport {CountriesProvider} from './context/CountriesContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SearchProvider>\n      <ModeProvider>\n        <CountriesProvider>\n          <App />\n        </CountriesProvider>\n        \n      </ModeProvider>\n    </SearchProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}